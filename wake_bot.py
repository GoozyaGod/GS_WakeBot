import os
from telegram import ReplyKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    Filters,
)
import subprocess

# —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
ALLOWED_USERS = [452614431, 1328995399]

TOKEN = os.environ.get("WAKEBOT_TOKEN")
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω! –°–æ–∑–¥–∞–π—Ç–µ /root/.wakebot_env —Å WAKEBOT_TOKEN")

# —Å–ø–∏—Å–æ–∫ –ü–ö
PCS = {
    "goozya": {
        "mac": "0A:E0:AF:DA:01:70",
        "iface": "br-lan",
    },
    "vlad": {
        "mac": "D8:5E:D3:E7:34:7E",
        "iface": "br-lan",
    },
}


def is_authorized(update):
    return update.effective_user.id in ALLOWED_USERS


def wake_pc(query, pc_key):
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ WOL
    pc = PCS.get(pc_key)

    try:
        subprocess.run(["etherwake", "-b", "-i", pc["iface"], pc["mac"]])
        query.message.reply_text(f"üí° –ü–ö {pc_key.upper()} ({pc['mac']}) –ø—Ä–æ–±—É–∂–¥—ë–Ω!")
    except Exception as e:
        query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


def show_keyboard(update):
    keyboard = [["Goozya", "Vlad"]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ü–ö –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è:", reply_markup=reply_markup)


def start(update, _):
    if not is_authorized(update):
        update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    text = update.message.text.lower()
    print(text)
    update.message.reply_text(text)
    if text in PCS:
        wake_pc(update, text)
    else:
        show_keyboard(update)


def text_handler(update, _):
    if not is_authorized(update):
        update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.")
        return

    text = update.message.text.lower()  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    pcs_keys = [k.lower() for k in PCS.keys()]

    if text in pcs_keys:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–ª –∏–º—è –ü–ö
        # –Ω–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
        pc_key = list(PCS.keys())[pcs_keys.index(text)]
        wake_pc(update, pc_key)
    else:
        # –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        show_keyboard(update)


def button(update, _):
    query = update.callback_query
    query.answer()

    match query.data:
        case "wake_goozya":
            wake_pc(query, "goozya")
        case "wake_vlad":
            wake_pc(query, "vlad")


def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button))

    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_handler))

    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
